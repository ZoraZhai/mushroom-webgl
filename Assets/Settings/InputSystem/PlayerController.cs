//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/InputSystem/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""acb4c0aa-7361-425b-855c-1c49fccdd579"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""564a09e5-7df7-4135-a382-609931378559"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e6807e5b-8994-4d7f-a3ff-6ce7db0c9b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""10d1091a-23d4-4df8-9797-18c325525593"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""f0af70e7-b491-4559-8395-bf5926234617"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c96f147a-0ccf-4595-86b0-5dd744d4505d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a3ac73ba-0940-4c19-9ff3-8dc3589f41f0"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5924b82e-8dac-441d-8ef0-3a3dfd59160e"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": ""Press(pressPoint=0.9)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6011f197-afc2-4ef0-8088-7e2aa7d5cdd6"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Tap(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca75511d-ed5e-4230-a0e8-0da6efcb292d"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77b3ea5b-a172-48c1-8c73-76607f188da9"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""4bb25544-cf0f-49b3-a864-51f141e08499"",
            ""actions"": [
                {
                    ""name"": ""ClickPlay"",
                    ""type"": ""Button"",
                    ""id"": ""69e69aeb-7c2e-44b4-a651-702196609d50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""43610ee2-d647-405a-8255-ab206b5c3e37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca9c0a37-e4c9-46c2-be67-d5fe11dc14d3"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7edf41a-bb59-4706-83dd-f03070741ddf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PinchZoom"",
            ""id"": ""aa46bc87-b8af-4c24-9f05-05e39b663186"",
            ""actions"": [
                {
                    ""name"": ""Primary Finger Position"",
                    ""type"": ""Value"",
                    ""id"": ""d56bf0d2-9c2b-4778-8a18-cd9169f8708b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Finger Position"",
                    ""type"": ""Value"",
                    ""id"": ""b8d909ea-6731-41f6-a16e-cf48d8b721c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Touch Contact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11b1f2a3-ec35-4052-907e-87dfa1984c35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4de65a63-822e-4808-a735-7b02871295e6"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Finger Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a27034-ef8b-444c-82f9-5fc283583efe"",
                    ""path"": ""<Touchscreen>/touch2/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Finger Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afe4eb12-a36b-4ba1-a36b-800a1be5fc67"",
                    ""path"": ""<Touchscreen>/touch2/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Touch Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RotationControls"",
            ""id"": ""ab87fa7b-1786-4724-9043-d67a6035c326"",
            ""actions"": [
                {
                    ""name"": ""TouchRotate"",
                    ""type"": ""Value"",
                    ""id"": ""e880d570-d734-4e71-8153-f2e1efcabb82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseRotate"",
                    ""type"": ""Value"",
                    ""id"": ""b6b5231b-6c2c-4899-9a89-bc59e32d34d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bebfbeb-7db5-461d-ab99-77362a353c7b"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f882412-a0e8-44b3-83b4-f80f580b4748"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Click = m_Player.FindAction("Click", throwIfNotFound: true);
        m_Player_Hold = m_Player.FindAction("Hold", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ClickPlay = m_UI.FindAction("ClickPlay", throwIfNotFound: true);
        m_UI_MouseMove = m_UI.FindAction("MouseMove", throwIfNotFound: true);
        // PinchZoom
        m_PinchZoom = asset.FindActionMap("PinchZoom", throwIfNotFound: true);
        m_PinchZoom_PrimaryFingerPosition = m_PinchZoom.FindAction("Primary Finger Position", throwIfNotFound: true);
        m_PinchZoom_SecondaryFingerPosition = m_PinchZoom.FindAction("Secondary Finger Position", throwIfNotFound: true);
        m_PinchZoom_SecondaryTouchContact = m_PinchZoom.FindAction("Secondary Touch Contact", throwIfNotFound: true);
        // RotationControls
        m_RotationControls = asset.FindActionMap("RotationControls", throwIfNotFound: true);
        m_RotationControls_TouchRotate = m_RotationControls.FindAction("TouchRotate", throwIfNotFound: true);
        m_RotationControls_MouseRotate = m_RotationControls.FindAction("MouseRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Click;
    private readonly InputAction m_Player_Hold;
    public struct PlayerActions
    {
        private @PlayerController m_Wrapper;
        public PlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Click => m_Wrapper.m_Player_Click;
        public InputAction @Hold => m_Wrapper.m_Player_Hold;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ClickPlay;
    private readonly InputAction m_UI_MouseMove;
    public struct UIActions
    {
        private @PlayerController m_Wrapper;
        public UIActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickPlay => m_Wrapper.m_UI_ClickPlay;
        public InputAction @MouseMove => m_Wrapper.m_UI_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ClickPlay.started += instance.OnClickPlay;
            @ClickPlay.performed += instance.OnClickPlay;
            @ClickPlay.canceled += instance.OnClickPlay;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ClickPlay.started -= instance.OnClickPlay;
            @ClickPlay.performed -= instance.OnClickPlay;
            @ClickPlay.canceled -= instance.OnClickPlay;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // PinchZoom
    private readonly InputActionMap m_PinchZoom;
    private List<IPinchZoomActions> m_PinchZoomActionsCallbackInterfaces = new List<IPinchZoomActions>();
    private readonly InputAction m_PinchZoom_PrimaryFingerPosition;
    private readonly InputAction m_PinchZoom_SecondaryFingerPosition;
    private readonly InputAction m_PinchZoom_SecondaryTouchContact;
    public struct PinchZoomActions
    {
        private @PlayerController m_Wrapper;
        public PinchZoomActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerPosition => m_Wrapper.m_PinchZoom_PrimaryFingerPosition;
        public InputAction @SecondaryFingerPosition => m_Wrapper.m_PinchZoom_SecondaryFingerPosition;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_PinchZoom_SecondaryTouchContact;
        public InputActionMap Get() { return m_Wrapper.m_PinchZoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PinchZoomActions set) { return set.Get(); }
        public void AddCallbacks(IPinchZoomActions instance)
        {
            if (instance == null || m_Wrapper.m_PinchZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PinchZoomActionsCallbackInterfaces.Add(instance);
            @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
        }

        private void UnregisterCallbacks(IPinchZoomActions instance)
        {
            @PrimaryFingerPosition.started -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled -= instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled -= instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled -= instance.OnSecondaryTouchContact;
        }

        public void RemoveCallbacks(IPinchZoomActions instance)
        {
            if (m_Wrapper.m_PinchZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPinchZoomActions instance)
        {
            foreach (var item in m_Wrapper.m_PinchZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PinchZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PinchZoomActions @PinchZoom => new PinchZoomActions(this);

    // RotationControls
    private readonly InputActionMap m_RotationControls;
    private List<IRotationControlsActions> m_RotationControlsActionsCallbackInterfaces = new List<IRotationControlsActions>();
    private readonly InputAction m_RotationControls_TouchRotate;
    private readonly InputAction m_RotationControls_MouseRotate;
    public struct RotationControlsActions
    {
        private @PlayerController m_Wrapper;
        public RotationControlsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchRotate => m_Wrapper.m_RotationControls_TouchRotate;
        public InputAction @MouseRotate => m_Wrapper.m_RotationControls_MouseRotate;
        public InputActionMap Get() { return m_Wrapper.m_RotationControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationControlsActions set) { return set.Get(); }
        public void AddCallbacks(IRotationControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_RotationControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotationControlsActionsCallbackInterfaces.Add(instance);
            @TouchRotate.started += instance.OnTouchRotate;
            @TouchRotate.performed += instance.OnTouchRotate;
            @TouchRotate.canceled += instance.OnTouchRotate;
            @MouseRotate.started += instance.OnMouseRotate;
            @MouseRotate.performed += instance.OnMouseRotate;
            @MouseRotate.canceled += instance.OnMouseRotate;
        }

        private void UnregisterCallbacks(IRotationControlsActions instance)
        {
            @TouchRotate.started -= instance.OnTouchRotate;
            @TouchRotate.performed -= instance.OnTouchRotate;
            @TouchRotate.canceled -= instance.OnTouchRotate;
            @MouseRotate.started -= instance.OnMouseRotate;
            @MouseRotate.performed -= instance.OnMouseRotate;
            @MouseRotate.canceled -= instance.OnMouseRotate;
        }

        public void RemoveCallbacks(IRotationControlsActions instance)
        {
            if (m_Wrapper.m_RotationControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotationControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_RotationControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotationControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotationControlsActions @RotationControls => new RotationControlsActions(this);
    public interface IPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClickPlay(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
    public interface IPinchZoomActions
    {
        void OnPrimaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
    }
    public interface IRotationControlsActions
    {
        void OnTouchRotate(InputAction.CallbackContext context);
        void OnMouseRotate(InputAction.CallbackContext context);
    }
}
